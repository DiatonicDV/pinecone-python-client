syntax = "proto3";

package pinecone_columnar;

option java_package = "io.pinecone.proto";
option go_package = "github.com/pinecone-io/go-pinecone/pinecone";

// Column-oriented apis for performance-sensitive clients with high vectors-per-request use cases

import "google/protobuf/timestamp.proto";

/**
 * Represents the a numpy ndarray
 */
message NdArray {
  // the actual array data, in bytes
  bytes           buffer     = 1;

  // the shape (dimensions) of the array
  repeated uint32 shape      = 2;

  // the data type of the array
  string          dtype      = 3;

  // whether lz4 compression is used on buffer
  bool            compressed = 4;
}

message Status {

  enum StatusCode {
    SUCCESS         = 0; // success
    READY           = 1; // ready to use
    ERROR           = 2; // error
    ERROR_DUPLICATE = 3; // already a existing service
  }

  // status code
  StatusCode          code        = 1;

  // error description of the very first exception
  string              description = 2;

  message Details {
    // the name of that problematic service
    string                    function    = 1;

    // the id of that problematic service
    string                    function_id = 2;

    // the class name of the exception
    string                    exception   = 3;

    // the reason of the exception
    string                    traceback   = 4;

    // the timestamp when error occurs
    google.protobuf.Timestamp time        = 5;
  }

  // the details of the error
  repeated Details    details     = 3;

  // number of messages sent by the function
  uint64              msg_sent    = 4;

  // number of messages received by the function
  uint64              msg_recv    = 5;

  // average time spent by messages in function
  map<string, uint32> avg_time    = 6;

  // size of a function's dataset if stateful
  uint64              size        = 7;
}

message ScoredResults {
  // String ids of the item results of a query
  NdArray ids    = 1;

  // Corresponding pairwise scores between the query to each item
  NdArray scores = 2;

  // Corresponding data for all of these items, if requested
  NdArray data   = 3;
}

// Request model for the Upsert operation
message UpsertRequest {
  // Unique id of the request
  uint64          request_id = 1;

  // The namespace name to upsert vectors into
  string          namespace  = 2;

  // ids of items to be inserted
  repeated string ids        = 3;

  // vectors of items to be inserted
  NdArray         data       = 4;

  // metadata of items to be inserted
  repeated string metadata   = 5;
}

// Response model for the Upsert operation
message UpsertResponse {
  // Unique id of the request
  uint64 request_id = 1;
}

// Request model for the Delete operation
message DeleteRequest {
  // Unique id of the request
  uint64          request_id = 1;

  // Namespace to delete vectors from
  string          namespace  = 2;

  // Vectors to delete
  repeated string ids        = 3;

  // Whether to delete all vectors from the index or namespace
  bool            delete_all        = 4;
}

// Response model for the Delete operation
message DeleteResponse {
  // Unique id of the request
  uint64 request_id = 1;
}

// Request stream item model for the StreamWrites operation
message AnyWriteRequest {
  oneof request {
    UpsertRequest upsert_request = 1;
    DeleteRequest delete_request = 2;
  }
}

// Response stream item model for the StreamWrites operation
message AnyWriteResponse {
  oneof response {
    UpsertResponse upsert_response = 1;
    DeleteResponse delete_response = 2;
  }
}

// Request model for the Fetch operation
message FetchRequest {
  // Unique id of the request
  uint64          request_id = 1;

  // The namespace of the vectors
  string          namespace  = 2;

  // Vector ids to fetch
  repeated string ids        = 3;
}

// Response model for the Fetch operation
message FetchResponse {
  // Unique id of the request
  uint64           request_id = 1;

  // The namespace of the vectors
  string           namespace  = 2;

  // Vector ids fetched
  repeated string ids        = 3;

  // Fetched vectors, in same order as ids
  repeated NdArray vectors    = 4;
}

// Request model for the Query operation
message QueryRequest {
  // Unique id of the request
  uint64          request_id          = 1;

  // Default namespace to query if no namespace specified in QueryVector (default value "")
  string          namespace           = 2;
  repeated string namespace_overrides = 7;

  // Number of results to return for each query
  uint32          top_k               = 3;
  repeated uint32 top_k_overrides     = 6;

  // Metadata filter
  string          filter               = 8;
  repeated string filter_overrides     = 9;

  // Whether to include the vectors and raw data in response as well as ids
  bool            include_data        = 4;

  // Query vectors
  NdArray         queries             = 5; // The batch of vectors to query
}

// Response model for the Query operation
message QueryResponse {
  // Unique id of the request
  uint64                 request_id = 1;

  // The corresponding matches returned for each query in the batch
  repeated ScoredResults matches    = 4;
}

// Request model for the ListVectors operation
message ListRequest {
  // Unique id of the request
  uint64 request_id = 1;

  // Namespace to list vectors of
  string namespace  = 2;
}

// Response module for the List operation
message ListResponse {
  // Unique id of the request
  uint64          request_id = 1;

  NdArray ids       = 2;

  string          namespace  = 3;
}

// Request model for the ListNamespaces operation
message ListNamespacesRequest {
  // Unique id of the request
  uint64 request_id = 1;
}

// Request model for the ListNamespaces operation
message ListNamespacesResponse {
  // Unique id of the request
  uint64          request_id = 1;

  // Namespaces that exist in the database
  repeated string namespaces = 2;
}

// Request model for the Summarize operation
message SummarizeRequest {
  // Unique id of the request
  uint64 request_id = 1;
}

// Response model for the Summarize operation
message SummarizeResponse {
  // Unique id of the request
  uint64 request_id = 1;

  // Size of a stateful function (Index)
  uint64 index_size = 2;

  // Dimension of the indexed vectors
  uint32 dimension = 3;
}

// The VectorColumnService interface is exposed by Pinecone vector database services
service VectorColumnService {
  // The Upsert operation is for uploading data (vector ids and values) to be indexed.
  // Note: Most users are recommended to submit upserts via the StreamWrites operation instead.
  // If a new value is upserted for an existing vector id, it overwrites the previous value.
  rpc Upsert(UpsertRequest) returns (UpsertResponse) {}

  // The Delete operation deletes a vector by id.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}

  // The StreamWrites operation is for uploading data (vector ids and values) to be indexed.
  // If a new value is upserted for an existing vector id, it overwrites the previous value.
  rpc StreamWrites(stream AnyWriteRequest) returns (stream AnyWriteResponse) {}

  // The Fetch operation returns a vector value by id.
  rpc Fetch(FetchRequest) returns (FetchResponse) {}

  // The Query operation queries the database for the nearest stored vectors to one
  // or more query vectors and returns their ids and/or values.
  rpc Query(QueryRequest) returns (QueryResponse) {}

  // The List operation returns the vector IDs in this database.
  rpc List(ListRequest) returns (ListResponse) {}

  // The ListNamespaces operation returns the namespaces for which data exists in this
  // database.
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {}

  // The Summarize operation returns summary statistics about the database contents.
  rpc Summarize(SummarizeRequest) returns (SummarizeResponse) {}
}
