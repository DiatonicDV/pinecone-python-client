name: PyPI Prerelease

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to build (branch name or SHA)'
        required: true
        type: string
        default: 'main' 
      releaseLevel:
        description: 'Release level'
        required: true
        type: choice
        default: 'patch'
        options:
          - 'patch' # bug fixes
          - 'minor' # new features, backwards compatible
          - 'major' # breaking changes
      prereleaseSuffix:
        description: 'Suffix to add onto the new version number in order to mark it as a prerelease'
        required: true
        type: string
        default: 'rc1'

env:
  PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

jobs:
  pypi:
    timeout-minutes: 30
    name: pypi
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Need full history and tags to compute list of commits in release
          ref: ${{ github.event.inputs.ref }}

      - name: Verify prereleaseSuffix not empty
        run: |
          if [ -z "${{ github.event.inputs.prereleaseSuffix }}" ]; then
            echo "prereleaseSuffix cannot be empty"
            exit 1
          fi
  
      - name: Bump version
        id: bump
        uses: './.github/actions/bump-version'
        with:
          versionFile: pinecone/__version__ 
          bumpType: ${{ github.event.inputs.releaseLevel }}
          prereleaseSuffix: ${{ github.event.inputs.prereleaseSuffix }}
      
      - name: Verify unique release number
        run: |
          if git tag -l | grep -q ${{ steps.bump.outputs.VERSION_TAG }}; then
            echo "Tag ${{ steps.bump.outputs.VERSION_TAG }} already exists, aborting"
            exit 1
          fi

      - name: Set up Git
        run: |
          git config --global user.name "Pinecone CI"
          git config --global user.email "clients@pinecone.io"
  
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
  
      - name: Build Python client
        run: make package

      - name: Upload Python client to PyPI
        id: pypi_upload
        run: make upload

      - name: Tag version
        id: tag_release
        run: |
          # For prereleases, we don't want to commit the version change
          git checkout pinecone/__version__
          # But we do want to tag the commit used to create the prerelease
          newVersionTag="${{ steps.bump.outputs.VERSION_TAG }}"
          git tag -a $newVersionTag -m "Release $newVersionTag"
    
      - name: Push tags
        run: git push --tags
  
      # - name: Get change list
      #   id: list_changes
      #   run: |
      #     EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #     echo "COMMIT_LOG<<$EOF" >> "$GITHUB_ENV"
      #     commits=$(git log --pretty=format:'- [[%h](https://github.com/pinecone-io/pinecone-python-client/commit/%h)] %s' ${{ steps.bump.outputs.PREVIOUS_VERSION_TAG }}..${{ steps.bump.outputs.VERSION_TAG }}~1) >> "$GITHUB_OUTPUT"
      #     echo "$EOF" >> "$GITHUB_ENV"
  
      # - name: Show changes
      #   run:
      #     echo "${{ steps.list_changes.outputs.COMMIT_LOG }}"
      
      # - name: Create Release Draft
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.tag_release.outputs.VERSION_TAG }}
      #     release_name: Release ${{ steps.bump.outputs.VERSION_TAG }}
      #     draft: true
      #     body: |
      #       ## Commits included in this release:
              
      #       ${{ steps.list_changes.outputs.COMMIT_LOG }}