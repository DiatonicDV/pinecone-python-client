name: "Integration Tests"
'on':
  workflow_call: {}

jobs:
  plugin-inference:
    name: Test inference plugin
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: [3.8, 3.12]
    steps:
      - uses: actions/checkout@v4
      - name: 'Set up Python ${{ matrix.python_version }}'
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python_version }}'
      - name: Setup Poetry
        uses: ./.github/actions/setup-poetry
        with:
          include_grpc: 'true'
      - name: 'Run integration tests'
        run: poetry run pytest tests/integration/inference -s -vv
        env:
          PINECONE_DEBUG_CURL: 'true'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'

  data-plane-serverless:
    name: Data plane serverless integration tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.8, 3.12]
        use_grpc: [true, false]
        metric: 
          - cosine
          # - euclidean
          # - dotproduct
        spec:
          - '{ "serverless": { "region": "us-west-2", "cloud": "aws" }}'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-data-plane
        with:
          python_version: '${{ matrix.python_version }}'
          use_grpc: '${{ matrix.use_grpc }}'
          metric: '${{ matrix.metric }}'
          spec: '${{ matrix.spec }}'
          PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
          freshness_timeout_seconds: 600
#   data-plane-pod:
#     name: Data plane pod integration tests
#     runs-on: ubuntu-latest
#     strategy:
#       max-parallel: 1
#       matrix:
#         use_grpc: [true, false]
#         metric: [cosine, dotproduct]
#         spec:
#           - '{ "pod": { "environment": "us-east1-gcp", "pod_type": "p1" }}'
#     steps:
#       - uses: actions/checkout@v4
#       - uses: ./.github/actions/test-data-plane
#         with:
#           use_grpc: '${{ matrix.use_grpc }}'
#           metric: '${{ matrix.metric }}'
#           spec: '${{ matrix.spec }}'
#           PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'

  control-plane-pod:
    name: control plane pod
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        use_grpc: [true, false]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Test control plane (pod, rest)
        uses: ./.github/actions/test-control-plane
        with:
          python_version: '${{ matrix.python-version }}'
          test_suite: 'pod'
          use_grpc: ${{ matrix.use_grpc }}
          metric: 'cosine'
          dimension: 10
          spec: '{ "pod": { "environment": "us-east4-gcp", "pod_type": "p1.x1" }}'
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          freshness_timeout_seconds: 600

  control-plane-serverless:
    name: control plane serverless
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        use_grpc: [true, false]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Test control plane (serverless, rest)
        uses: ./.github/actions/test-control-plane
        with:
          python_version: '${{ matrix.python-version }}'
          test_suite: 'serverless'
          use_grpc: ${{ matrix.use_grpc }}
          metric: 'cosine'
          dimension: 10
          spec: '{ "serverless": { "cloud": "aws", "region": "us-west-2" }}'
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          freshness_timeout_seconds: 600