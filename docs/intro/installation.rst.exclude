.. _Intro Installation:

Installation
=======================

Pinecone is tested on Python 3.6+.

We strongly recommend that you install Pinecone in a virtual environment.
We think it's good for Python hygiene. 
It's really easy to start using virtual environments with one of these guides: 
`[1] <https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/>`_,
`[2] <https://realpython.com/python-virtual-environments-a-primer/>`_.


Installing Pinecone
------------------------------------

.. code-block:: bash

    pip install pinecone-client


A neat feature of Pinecone is that you can visualize the graphical representations
of your Pinecone services. If you plan to use Pinecone in a Jupyter notebook,
you should install the graph visualization tool 
`graphviz <https://graphviz.org/download/>`_ in your operating system.
Throughout the documentation, we assume that you have ``graphviz`` installed.

.. code-block:: bash

    # OSX
    brew install graphviz
    # Debian
    sudo apt install graphviz
    # RPM
    sudo yum install graphviz
    # Windows
    winget install graphviz




Setting Up Pinecone
------------------------------------

You will need a Pinecone API key for this step. 
If you haven't received your API key, visit `pinecone.io <https://www.pinecone.io/start/>`_  
to get started. You will receive an API key after registration.

Make sure to load your Pinecone API key before calling Pinecone services:


.. code-block:: Python

    import pinecone

    pinecone.init(api_key="YOUR_API_KEY")



Hello, Pinecone!
------------------------------------

.. tip::
   Try out this example on `Google Colab <https://colab.research.google.com/github/pinecone-io/examples/blob/master/quick_tour/hello_pinecone.ipynb>`__.

.. code-block:: python

    import pinecone.graph
    import pinecone.service
    import pinecone.connector
    import pandas as pd

    service_name="hello-pinecone"
    graph = pinecone.graph.IndexGraph()  # create a graph
    graph.view()  # view the graph
    pinecone.service.deploy(service_name, graph)  # deploy the graph as a service
    conn = pinecone.connector.connect(service_name)  # connect to the service
    df = pd.DataFrame(data={"id": ["A", "B"], "vector": [[1, 1, 1], [2, 2, 2]]})
    conn.upsert(items=zip(df.id, df.vector)).collect()  # insert vectors
    conn.query(queries=[[0,1,0]], top_k=5).collect()  # query
    conn.info()  # index info
    pinecone.service.stop(service_name=service_name)  # stop the service
