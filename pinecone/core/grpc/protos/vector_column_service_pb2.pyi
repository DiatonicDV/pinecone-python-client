"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class NdArray(google.protobuf.message.Message):
    """*
    The array data, structured as a Python numpy ndarray.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BUFFER_FIELD_NUMBER: builtins.int
    SHAPE_FIELD_NUMBER: builtins.int
    DTYPE_FIELD_NUMBER: builtins.int
    COMPRESSED_FIELD_NUMBER: builtins.int
    buffer: builtins.bytes
    """The actual array data, in bytes."""

    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The shape (dimensions) of the array."""
        pass
    dtype: typing.Text
    """The data type of the array.  For example, `float32`."""

    compressed: builtins.bool
    """Indicates if lz4 compression is used on the buffer."""

    def __init__(self,
        *,
        buffer: builtins.bytes = ...,
        shape: typing.Optional[typing.Iterable[builtins.int]] = ...,
        dtype: typing.Text = ...,
        compressed: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["buffer",b"buffer","compressed",b"compressed","dtype",b"dtype","shape",b"shape"]) -> None: ...
global___NdArray = NdArray

class ScoredResults(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    IDS_FIELD_NUMBER: builtins.int
    SCORES_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> global___NdArray:
        """The query result's vector ids."""
        pass
    @property
    def scores(self) -> global___NdArray:
        """The corresponding similarity scores between the query to each item."""
        pass
    @property
    def data(self) -> global___NdArray:
        """The corresponding data for all of these items, if requested."""
        pass
    @property
    def metadata(self) -> global___NdArray:
        """The corresponding metadata for all of these items, if requested."""
        pass
    def __init__(self,
        *,
        ids: typing.Optional[global___NdArray] = ...,
        scores: typing.Optional[global___NdArray] = ...,
        data: typing.Optional[global___NdArray] = ...,
        metadata: typing.Optional[global___NdArray] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data",b"data","ids",b"ids","metadata",b"metadata","scores",b"scores"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["data",b"data","ids",b"ids","metadata",b"metadata","scores",b"scores"]) -> None: ...
global___ScoredResults = ScoredResults

class UpsertRequest(google.protobuf.message.Message):
    """The request model for the upsert operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAMESPACE_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    namespace: typing.Text
    """The namespace name where you upsert vectors."""

    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The ids of the items that you insert."""
        pass
    @property
    def data(self) -> global___NdArray:
        """The vectors of items that you insert."""
        pass
    @property
    def metadata(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.struct_pb2.Struct]:
        """The metadata of the items that you insert."""
        pass
    def __init__(self,
        *,
        namespace: typing.Text = ...,
        ids: typing.Optional[typing.Iterable[typing.Text]] = ...,
        data: typing.Optional[global___NdArray] = ...,
        metadata: typing.Optional[typing.Iterable[google.protobuf.struct_pb2.Struct]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data",b"data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["data",b"data","ids",b"ids","metadata",b"metadata","namespace",b"namespace"]) -> None: ...
global___UpsertRequest = UpsertRequest

class UpsertResponse(google.protobuf.message.Message):
    """The response model for the upsert operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    UPSERTED_COUNT_FIELD_NUMBER: builtins.int
    upserted_count: builtins.int
    """The number of vectors upserted."""

    def __init__(self,
        *,
        upserted_count: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["upserted_count",b"upserted_count"]) -> None: ...
global___UpsertResponse = UpsertResponse

class DeleteRequest(google.protobuf.message.Message):
    """The request model for the delete operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAMESPACE_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    DELETE_ALL_FIELD_NUMBER: builtins.int
    namespace: typing.Text
    """The namespace containing the vectors to delete."""

    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The vectors to delete."""
        pass
    delete_all: builtins.bool
    """Indicates if the operation should delete all vectors from the index or the namespace."""

    def __init__(self,
        *,
        namespace: typing.Text = ...,
        ids: typing.Optional[typing.Iterable[typing.Text]] = ...,
        delete_all: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["delete_all",b"delete_all","ids",b"ids","namespace",b"namespace"]) -> None: ...
global___DeleteRequest = DeleteRequest

class DeleteResponse(google.protobuf.message.Message):
    """The response model for the delete operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___DeleteResponse = DeleteResponse

class FetchRequest(google.protobuf.message.Message):
    """The request model for the fetch operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAMESPACE_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    namespace: typing.Text
    """The namespace of the vectors."""

    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The vector ids to fetch."""
        pass
    def __init__(self,
        *,
        namespace: typing.Text = ...,
        ids: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ids",b"ids","namespace",b"namespace"]) -> None: ...
global___FetchRequest = FetchRequest

class FetchResponse(google.protobuf.message.Message):
    """The response model for the fetch operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAMESPACE_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    VECTORS_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    namespace: typing.Text
    """The namespace of the vectors."""

    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The fetched vector ids."""
        pass
    @property
    def vectors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NdArray]:
        """The fetched vectors, in the same order as the ids."""
        pass
    @property
    def metadata(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.struct_pb2.Struct]:
        """The fetched metadata, in same order as the ids."""
        pass
    def __init__(self,
        *,
        namespace: typing.Text = ...,
        ids: typing.Optional[typing.Iterable[typing.Text]] = ...,
        vectors: typing.Optional[typing.Iterable[global___NdArray]] = ...,
        metadata: typing.Optional[typing.Iterable[google.protobuf.struct_pb2.Struct]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ids",b"ids","metadata",b"metadata","namespace",b"namespace","vectors",b"vectors"]) -> None: ...
global___FetchResponse = FetchResponse

class QueryRequest(google.protobuf.message.Message):
    """The request model for the query operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAMESPACE_FIELD_NUMBER: builtins.int
    NAMESPACE_OVERRIDES_FIELD_NUMBER: builtins.int
    TOP_K_FIELD_NUMBER: builtins.int
    TOP_K_OVERRIDES_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    FILTER_OVERRIDES_FIELD_NUMBER: builtins.int
    INCLUDE_VALUES_FIELD_NUMBER: builtins.int
    INCLUDE_METADATA_FIELD_NUMBER: builtins.int
    QUERIES_FIELD_NUMBER: builtins.int
    namespace: typing.Text
    """The default namespace to query if no namespace is specified in `QueryVector`.  The default value is `""`."""

    @property
    def namespace_overrides(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A sequence of namespace names corresponding to each query.
        For example, the third query vector queries the third namespace override.
        """
        pass
    top_k: builtins.int
    """The number of results to return for each query."""

    @property
    def top_k_overrides(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A sequence of the `top_k` values corresponding to each query."""
        pass
    @property
    def filter(self) -> google.protobuf.struct_pb2.Struct:
        """The metadata filter."""
        pass
    @property
    def filter_overrides(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.struct_pb2.Struct]:
        """A sequence of json metadata filter expressions corresponding to each query. One expression per query."""
        pass
    include_values: builtins.bool
    """Indicates if the vectors should be in the response as well as the ids."""

    include_metadata: builtins.bool
    """Indicates if the metadata should be in the response as well as the ids."""

    @property
    def queries(self) -> global___NdArray:
        """The query vectors.
        The batch of vectors to query.
        """
        pass
    def __init__(self,
        *,
        namespace: typing.Text = ...,
        namespace_overrides: typing.Optional[typing.Iterable[typing.Text]] = ...,
        top_k: builtins.int = ...,
        top_k_overrides: typing.Optional[typing.Iterable[builtins.int]] = ...,
        filter: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        filter_overrides: typing.Optional[typing.Iterable[google.protobuf.struct_pb2.Struct]] = ...,
        include_values: builtins.bool = ...,
        include_metadata: builtins.bool = ...,
        queries: typing.Optional[global___NdArray] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["filter",b"filter","queries",b"queries"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","filter_overrides",b"filter_overrides","include_metadata",b"include_metadata","include_values",b"include_values","namespace",b"namespace","namespace_overrides",b"namespace_overrides","queries",b"queries","top_k",b"top_k","top_k_overrides",b"top_k_overrides"]) -> None: ...
global___QueryRequest = QueryRequest

class QueryResponse(google.protobuf.message.Message):
    """The response model for the query operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MATCHES_FIELD_NUMBER: builtins.int
    @property
    def matches(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ScoredResults]:
        """The corresponding matches returned for each query in the batch."""
        pass
    def __init__(self,
        *,
        matches: typing.Optional[typing.Iterable[global___ScoredResults]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["matches",b"matches"]) -> None: ...
global___QueryResponse = QueryResponse

class DescribeIndexStatsRequest(google.protobuf.message.Message):
    """The request model for the `DescribeIndexStats` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___DescribeIndexStatsRequest = DescribeIndexStatsRequest

class NamespaceSummary(google.protobuf.message.Message):
    """A summary of the contents of a namespace."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VECTOR_COUNT_FIELD_NUMBER: builtins.int
    vector_count: builtins.int
    """The number of vectors stored in this namespace. Note that updates to this field may lag behind updates to the
    underlying index and corresponding query results, etc.
    """

    def __init__(self,
        *,
        vector_count: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["vector_count",b"vector_count"]) -> None: ...
global___NamespaceSummary = NamespaceSummary

class DescribeIndexStatsResponse(google.protobuf.message.Message):
    """The response for the `DescribeIndexStats` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class NamespacesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___NamespaceSummary: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___NamespaceSummary] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAMESPACES_FIELD_NUMBER: builtins.int
    DIMENSION_FIELD_NUMBER: builtins.int
    @property
    def namespaces(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___NamespaceSummary]:
        """A mapping for each namespace in the index from namespace name to a summary of its contents."""
        pass
    dimension: builtins.int
    """The dimension of the indexed vectors."""

    def __init__(self,
        *,
        namespaces: typing.Optional[typing.Mapping[typing.Text, global___NamespaceSummary]] = ...,
        dimension: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimension",b"dimension","namespaces",b"namespaces"]) -> None: ...
global___DescribeIndexStatsResponse = DescribeIndexStatsResponse
