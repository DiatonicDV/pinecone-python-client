"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Vector(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    id: typing.Text
    """This is the vector's unique id."""

    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """This is the vector data included in the request."""
        pass
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct:
        """This is the metadata included in the request."""
        pass
    def __init__(self,
        *,
        id: typing.Text = ...,
        values: typing.Optional[typing.Iterable[builtins.float]] = ...,
        metadata: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","metadata",b"metadata","values",b"values"]) -> None: ...
global___Vector = Vector

class ScoredVector(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    SCORE_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    id: typing.Text
    """This is the vector's unique id."""

    score: builtins.float
    """This is a measure of similarity between this vector and the query vector.  The higher the score, the more they are similar."""

    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """This is the vector data, if it is requested."""
        pass
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct:
        """This is the metadata, if it is requested."""
        pass
    def __init__(self,
        *,
        id: typing.Text = ...,
        score: builtins.float = ...,
        values: typing.Optional[typing.Iterable[builtins.float]] = ...,
        metadata: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","metadata",b"metadata","score",b"score","values",b"values"]) -> None: ...
global___ScoredVector = ScoredVector

class UpsertRequest(google.protobuf.message.Message):
    """The request for the `Upsert` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VECTORS_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    @property
    def vectors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Vector]:
        """This is the actual array data."""
        pass
    namespace: typing.Text
    """This is the namespace name where you upsert vectors."""

    def __init__(self,
        *,
        vectors: typing.Optional[typing.Iterable[global___Vector]] = ...,
        namespace: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespace",b"namespace","vectors",b"vectors"]) -> None: ...
global___UpsertRequest = UpsertRequest

class UpsertResponse(google.protobuf.message.Message):
    """The response for the `Upsert` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    UPSERTED_COUNT_FIELD_NUMBER: builtins.int
    upserted_count: builtins.int
    """The number of vectors upserted."""

    def __init__(self,
        *,
        upserted_count: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["upserted_count",b"upserted_count"]) -> None: ...
global___UpsertResponse = UpsertResponse

class DeleteRequest(google.protobuf.message.Message):
    """The request for the `Delete` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    IDS_FIELD_NUMBER: builtins.int
    DELETE_ALL_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Vectors to delete."""
        pass
    delete_all: builtins.bool
    """This indicates that all vectors in the index namespace should be deleted."""

    namespace: typing.Text
    """The namespace to delete vectors from, if applicable."""

    def __init__(self,
        *,
        ids: typing.Optional[typing.Iterable[typing.Text]] = ...,
        delete_all: builtins.bool = ...,
        namespace: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["delete_all",b"delete_all","ids",b"ids","namespace",b"namespace"]) -> None: ...
global___DeleteRequest = DeleteRequest

class DeleteResponse(google.protobuf.message.Message):
    """The response for the `Delete` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___DeleteResponse = DeleteResponse

class FetchRequest(google.protobuf.message.Message):
    """The request for the `Fetch` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    IDS_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The vector ids to fetch."""
        pass
    namespace: typing.Text
    def __init__(self,
        *,
        ids: typing.Optional[typing.Iterable[typing.Text]] = ...,
        namespace: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ids",b"ids","namespace",b"namespace"]) -> None: ...
global___FetchRequest = FetchRequest

class FetchResponse(google.protobuf.message.Message):
    """The response for the `Fetch` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class VectorsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___Vector: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___Vector] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    VECTORS_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    @property
    def vectors(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Vector]:
        """The fetched vectors, in the form of a map between the fetched ids and the fetched vectors"""
        pass
    namespace: typing.Text
    """The namespace of the vectors."""

    def __init__(self,
        *,
        vectors: typing.Optional[typing.Mapping[typing.Text, global___Vector]] = ...,
        namespace: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespace",b"namespace","vectors",b"vectors"]) -> None: ...
global___FetchResponse = FetchResponse

class QueryVector(google.protobuf.message.Message):
    """A single query vector within a `QueryRequest`."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VALUES_FIELD_NUMBER: builtins.int
    TOP_K_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """The query vector values. This should be the same length as the dimension of the index being queried."""
        pass
    top_k: builtins.int
    """An override for the number of results to return for this query vector."""

    namespace: typing.Text
    """An override the namespace to search."""

    @property
    def filter(self) -> google.protobuf.struct_pb2.Struct:
        """An override for the metadata filter to apply. This replaces the request-level filter."""
        pass
    def __init__(self,
        *,
        values: typing.Optional[typing.Iterable[builtins.float]] = ...,
        top_k: builtins.int = ...,
        namespace: typing.Text = ...,
        filter: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["filter",b"filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","namespace",b"namespace","top_k",b"top_k","values",b"values"]) -> None: ...
global___QueryVector = QueryVector

class QueryRequest(google.protobuf.message.Message):
    """The request for the `Query` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAMESPACE_FIELD_NUMBER: builtins.int
    TOP_K_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    INCLUDE_VALUES_FIELD_NUMBER: builtins.int
    INCLUDE_METADATA_FIELD_NUMBER: builtins.int
    QUERIES_FIELD_NUMBER: builtins.int
    namespace: typing.Text
    """The namespace to query."""

    top_k: builtins.int
    """The number of results to return for each query."""

    @property
    def filter(self) -> google.protobuf.struct_pb2.Struct:
        """The filter to apply if no filter is specified in `QueryVector. You can use vector metadata to limit your search. See https://www.pinecone.io/docs/metadata-filtering/`"""
        pass
    include_values: builtins.bool
    """Indicates whether vector values are included in the response."""

    include_metadata: builtins.bool
    """Indicates whether metadata is included in the response as well as the ids."""

    @property
    def queries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___QueryVector]:
        """The query vectors."""
        pass
    def __init__(self,
        *,
        namespace: typing.Text = ...,
        top_k: builtins.int = ...,
        filter: typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        include_values: builtins.bool = ...,
        include_metadata: builtins.bool = ...,
        queries: typing.Optional[typing.Iterable[global___QueryVector]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["filter",b"filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","include_metadata",b"include_metadata","include_values",b"include_values","namespace",b"namespace","queries",b"queries","top_k",b"top_k"]) -> None: ...
global___QueryRequest = QueryRequest

class SingleQueryResults(google.protobuf.message.Message):
    """The query results for a single `QueryVector`"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MATCHES_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    @property
    def matches(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ScoredVector]:
        """The matches for the vectors."""
        pass
    namespace: typing.Text
    """The namespace for the vectors."""

    def __init__(self,
        *,
        matches: typing.Optional[typing.Iterable[global___ScoredVector]] = ...,
        namespace: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["matches",b"matches","namespace",b"namespace"]) -> None: ...
global___SingleQueryResults = SingleQueryResults

class QueryResponse(google.protobuf.message.Message):
    """The response for the `Query` operation. These are the matches found for a particular query vector. The matches are ordered from most similar to least similar."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RESULTS_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SingleQueryResults]:
        """The results of each query. The order is the same as `QueryRequest.queries`."""
        pass
    def __init__(self,
        *,
        results: typing.Optional[typing.Iterable[global___SingleQueryResults]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["results",b"results"]) -> None: ...
global___QueryResponse = QueryResponse

class DescribeIndexStatsRequest(google.protobuf.message.Message):
    """The request for the `DescribeIndexStats` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___DescribeIndexStatsRequest = DescribeIndexStatsRequest

class NamespaceSummary(google.protobuf.message.Message):
    """A summary of the contents of a namespace."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VECTOR_COUNT_FIELD_NUMBER: builtins.int
    vector_count: builtins.int
    """The number of vectors stored in this namespace. Note that updates to this field may lag behind updates to the
    underlying index and corresponding query results, etc.
    """

    def __init__(self,
        *,
        vector_count: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["vector_count",b"vector_count"]) -> None: ...
global___NamespaceSummary = NamespaceSummary

class DescribeIndexStatsResponse(google.protobuf.message.Message):
    """The response for the `DescribeIndexStats` operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class NamespacesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___NamespaceSummary: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___NamespaceSummary] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAMESPACES_FIELD_NUMBER: builtins.int
    DIMENSION_FIELD_NUMBER: builtins.int
    INDEX_FULLNESS_FIELD_NUMBER: builtins.int
    @property
    def namespaces(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___NamespaceSummary]:
        """A mapping for each namespace in the index from namespace name to a summary of its contents."""
        pass
    dimension: builtins.int
    """The dimension of the indexed vectors."""

    index_fullness: builtins.float
    """The fullness of the index."""

    def __init__(self,
        *,
        namespaces: typing.Optional[typing.Mapping[typing.Text, global___NamespaceSummary]] = ...,
        dimension: builtins.int = ...,
        index_fullness: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimension",b"dimension","index_fullness",b"index_fullness","namespaces",b"namespaces"]) -> None: ...
global___DescribeIndexStatsResponse = DescribeIndexStatsResponse
